---
swagger: "2.0"
info:
  description: "This is a simple bookstore server with a book inventory, users and\
    \ a shopping cart."
  version: "1.0.0"
  title: "Hypermedia project - bookstore"
  contact:
    email: "bernardo.casasole@mail.polimi.it"
  license:
    name: "Apache-2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "hypermedia2019-booky.herokuapp.com"
basePath: "/v2"
tags:
- name: "book"
  description: "Available book"
- name: "user"
  description: "Operations about user"
- name: "event"
  description: "Operation about events"
- name: "cart"
  description: "Access to the cart"
- name: "author"
  description: "Operation about authors"
schemes:
- "https"
- "http"
paths:
  /books:
    get:
      tags:
      - "book"
      summary: "Books available in the inventory"
      description: "List of books available in the inventory"
      operationId: "booksGET"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "A collection of Books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        404:
          description: "Books not found"
      x-swagger-router-controller: "Book"
  /books/{bookId}:
    get:
      tags:
      - "book"
      summary: "Find book by ID"
      description: "Returns a specific book given its ID"
      operationId: "getBookById"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of book to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema: 
            $ref: "#/definitions/Book"
        404:
          description: "Book not found"
      x-swagger-router-controller: "Book"
  /books/byTitle/{title}:
    get:
      tags:
      - "book"
      summary: "Find book(s) by Title"
      description: "Returns every book which has the specified string within the title. This means the specified title can be partial. Case insensitive."
      operationId: "getBooksByTitle"
      produces:
      - "application/json"
      parameters:
      - name: "title"
        in: "path"
        description: "title of book(s) to return"
        required: true
        type: "string"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        404:
          description: "Books not found for specified title"
      x-swagger-router-controller: "Book"
  /books/byTheme/{theme}:
    get:
      tags:
      - "book"
      summary: "Find book(s) by theme"
      description: "Returns a list of books having the specified theme as one of their themes"
      operationId: "getBooksByTheme"
      produces:
      - "application/json"
      parameters:
      - name: "theme"
        in: "path"
        description: "theme of books to return"
        required: true
        type: "string"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        404:
          description: "Books not found for specified theme"
      x-swagger-router-controller: "Book"
  /books/byGenre/{genre}:
    get:
      tags:
      - "book"
      summary: "Find book(s) by genre"
      description: "Returns a list of books with specified genre"
      operationId: "getBooksByGenre"
      produces:
      - "application/json"
      parameters:
      - name: "genre"
        in: "path"
        description: "genre of book(s) to return"
        required: true
        type: "string"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        404:
          description: "Books not found for specified genre"
      x-swagger-router-controller: "Book"
  /books/byAuthor/{author}:
    get:
      tags:
      - "book"
      summary: "Find book(s) by author"
      description: "Returns a list of books with specified author id"
      operationId: "getBooksByAuthor"
      produces:
      - "application/json"
      parameters:
      - name: "author"
        in: "path"
        description: "author of book(s) to return"
        required: true
        type: "string"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        404:
          description: "Books not found"
      x-swagger-router-controller: "Book"
  /books/sponsored:
    get:
      tags:
      - "book"
      summary: "Find all sponsored books"
      description: "Returns a list of sponsored books"
      operationId: "getSponsoredBooks"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        404:
          description: "Sponsored books not found"
      x-swagger-router-controller: "Book"
  /books/bySoldCopies:
    get:
      tags:
      - "book"
      summary: "Find books orderd by number of sold copies"
      description: "Returns a list of books ordered by sold copies"
      operationId: "getBookBySoldCopies"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"

      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        404:
          description: "No books found"
      x-swagger-router-controller: "Book"
  /books/bySoldCopiesInMonth/{month}/{year}:
    get:
      tags:
      - "book"
      summary: "Get books ordered by num of sold copies in the specified month"
      description: "Returns books ordered by num of sold copies in the specified month, if there are sales for that month. If there are not, return a standard books list. (To try it, choose dates between 04/2019 and 10/2019). Sold quantities can be seen in the 'totalsold' field (not soldQty)"
      operationId: "getBooksBySoldCopiesInMonth"
      produces:
      - "application/json"
      parameters:
      - name: "month"
        in: "path"
        description: "month value, in range 1-12"
        required: true
        type: "integer"
        format: "int64"
      - name: "year"
        in: "path"
        description: "year value"
        required: true
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        404:
          description: "Books not found"
      x-swagger-router-controller: "Book"
  /authors:
    get:
      tags:
      - "author"
      summary: "Authors present in our website"
      description: "List of authors  present in our website"
      operationId: "authorsGET"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "A collection of Author"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Author"
        404:
          description: "Authors not found"
      x-swagger-router-controller: "Author"
  /author/{authorId}:
    get:
      tags:
      - "author"
      summary: "Find author by ID"
      description: "Returns an author based on its id"
      operationId: "getAuthorById"
      produces:
      - "application/json"
      parameters:
      - name: "authorId"
        in: "path"
        description: "ID of author to return. (example 1, 2, 3+)"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Author"
        404:
          description: "Author not found"
      x-swagger-router-controller: "Author"
  /author/byName/{name}:
    get:
      tags:
      - "author"
      summary: "Find authors by partial or full name"
      description: "Returns all authors matching the given partial name, starting from 1 character up. It's case insensitive"
      operationId: "getAuthorByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "name of author to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Author"
        404:
          description: "Author not found"
      x-swagger-router-controller: "Author"
  /events:
    get:
      tags:
      - "event"
      summary: "Events in schedule"
      description: "List of events in schedule"
      operationId: "eventsGET"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "A collection of events"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        404:
          description: "Events not found"
      x-swagger-router-controller: "Event"
  /events/{eventId}:
    get:
      tags:
      - "event"
      summary: "Find event by ID"
      description: "Returns a specific event"
      operationId: "findEventById"
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "ID of event"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Event"
        404:
          description: "Event not found"
      x-swagger-router-controller: "Event"
  /events/byName/{eventName}:
    get:
      tags:
      - "event"
      summary: "Find event by name"
      description: "Returns a specific event by name"
      operationId: "findEventsByName"
      produces:
      - "application/json"
      parameters:
      - name: "eventName"
        in: "path"
        description: "name of event"
        required: true
        type: "string"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Event"
        404:
          description: "Event not found with specified partial name"
      x-swagger-router-controller: "Event"
  /events/byMonth/{month}/{year}:
    get:
      tags:
      - "event"
      summary: "Find events by date"
      description: "Returns a list of events by date, grouped by month"
      operationId: "findEventByMonth"
      produces:
      - "application/json"
      parameters:
      - name: "month"
        in: "path"
        description: "1-12 value for the month"
        required: true
        type: "integer"
        format: "int64"
      - name: "year"
        in: "path"
        description: "year of the events searched"
        required: true
        type: "integer"
        format: "int64"
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0."
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Event"
        404:
          description: "Event not found in specified month"
      x-swagger-router-controller: "Event"
  /events/eventsMonth:
    get:
      tags:
      - "event"
      summary: "Returns all the distinct months in events "
      description: "Returns all the distinct months in events "
      operationId: "eventsMonth"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
        400:
          description: "Unexpected error"
      x-swagger-router-controller: "Event"    
  /user:
    get:
      tags:
      - "user"
      summary: "retrieve a user, based on cookies"
      description: "returns a specific user, based on cookies and login done before. If the user is not logged, returns an empty json"
      operationId: "getUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "successfully managed operation"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "Invalid user id"
      x-swagger-router-controller: "User"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Login"
      description: "Login with a form urlencoded: 'username=UNAME&password=PWD'. A usable example is (quotes must be removed):<br>'username=Marius99&password=mariorossi'<br>Note: there must not be line breaks, spaces or quotes in the form"
      operationId: "userLoginPOST"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        description: "in a urlencoded form: <br>username=UNAME&password=PWD<br> For instance, a working example is <br>'username=Marius99&password=mariorossi'<br>(without spaces, line breaks or quotes)"
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "login successful"
          schema:
            $ref: "#/definitions/Response"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/Response"
      x-swagger-router-controller: "User"
  /user/logout:
    post:
      tags:
      - "user"
      summary: "Logout"
      description: "Logout from current account"
      operationId: "userLogoutPOST"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      responses:
        200:
          description: "succesfull logout"
          schema:
            $ref: "#/definitions/Response"
      x-swagger-router-controller: "User"
  /user/register:
    post:
      tags:
      - "user"
      summary: "Register"
      description: "Register into the store, with a urlencoded form. Working example (Quotes must be removed):<br>'name=UserOne&username=newuser1&password=u1&email=u1@example.com&ccn=u1ccn&cch=UserOne'<br>(form must be without quotes or spaces or line breaks)"
      operationId: "userRegisterPOST"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        description: "Use format: <br>'name=NAME&username=UNAME&\npassword=PWD&email=EMAIL&\nccn=CCN&cch=CCH'<br>As example one can use (once with success):<br>'name=UserOne&username=newuser1&\npassword=u1&email=u1@example.com&\nccn=u1ccn&cch=UserOne'<br>(NOTE: There must be no spaces, line breaks or quotes)"
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "succesfull registration"
          schema:
            $ref: "#/definitions/Response"
        400:
          description: "bad request"
          schema:
            $ref: "#/definitions/Response"
        409:
          description: "Already existing user"
          schema:
            $ref: "#/definitions/Response"
        500:
          description: "Internal Server Error"
      x-swagger-router-controller: "User"
  /cart:
    get:
      tags:
      - "cart"
      summary: "View the content of the cart"
      operationId: "cartGET"
      produces:
      - "application/json"
      responses:
        200:
          description: "succesful operartion"
          schema:
            $ref: "#/definitions/Cart"
        401:
          description: "unauthorized"
      x-swagger-router-controller: "Cart"
  /cart/addBook:
    post:
      tags:
      - "cart"
      summary: "add a book"
      description: "add a book to the current user cart, if the user is logged. Working example (remove quotes, spaces and line breaks):<br>'bookId=5&qty=3'"
      operationId: "cartAddBook"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        description: "in form of<br>'bookId=BOOK_ID&qty=QTY'<br>A working example is (quotes must be removed):<br>'bookId=5&qty=3'"
        schema:
          $ref: "#/definitions/Cart"
      responses:
        200:
          description: "successful addition to cart"
          schema:
            $ref: "#/definitions/Cart"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/Response"
      x-swagger-router-controller: "Cart"
  /cart/updateQty:
    post:
      tags:
      - "cart"
      summary: "add a book"
      description: "add a book to the current user cart. Working example (remove quotes, spaces and line breaks):<br>'bookId=5&qty=3'"
      operationId: "cartUpdateQty"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        description: "in form of<br>'bookId=BOOK_ID&qty=QTY'<br>A working example is (quotes must be removed):<br>'bookId=5&qty=3'"
        schema:
          $ref: "#/definitions/Cart"
      responses:
        200:
          description: "succesfull addition to cart"
          schema:
            $ref: "#/definitions/Response"
        401:
          description: "unauthorized"
          schema:
            $ref: "#/definitions/Response"
      x-swagger-router-controller: "Cart"
definitions:
  Author:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      biography:
        type: "string"
    title: "Author"
    description: "Author present in our website"
    example:
      id: 1
      name: "Michelle Obama"
      description: "Description of Michelle Obama"
      biography: "Biography of Michelle Obama"
  Event:
    type: "object"
    properties:
      eid:
        type: "integer"
      eventname:
        type: "string"
      author:
        type: "integer"
      presentedBook:
        type: "integer"
      date:
        type: "string"
      details1:
        type: "string"
      details2:
        type: "string"
    title: "Event"
    description: "An event available in our website"
    example:
      eid: 2
      eventname: "What the Rich Teach Their Kids About Money"
      author: 7
      presentedBook: 4
      date: "2019/6/1"
      details1: "some event details, 1"
      details2: "some event details, 2"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      username:
        type: "string"
      password:
        type: "string"
      email:
        type: "string"
      creditcardNumber:
        type: "string"
      creditcardHolder:
        type: "string"
    title: "User"
    description: "A user"
    example:
      id: 1
      name: "Mario Rossi"
      username: "Marius99"
      password: "mariorossi"
      email: "mariorossi@example.com"
      creditcardNumber: "asbc123"
      creditcardHolder: "Mario Rossi"
  Cart:
    type: "object"
    properties:
      bookId:
        type: "string"
      qty:
        type: "string"
      title:
        type: "string"
      price:
        type: "number"
        format: "float"
      currency:
        type: "string"
    title: "Cart"
    description: "Order for books"
    example:
      id: 3
      qty: 4
      title: "Remarkable Creatures"
      price: 12.1
      currency: "€"
  Book:
    type: "object"
    required:
    - "title"
    properties:
      bookId:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      author:
        type: "string"
      price:
        type: "number"
        format: "float"
      currency:
        type: "string"
      stockQty:
        type: "integer"
      soldqty:
        type: "integer"
      status:
        type: "string"
        description: "book availability in the inventory"
        enum:
        - "available"
        - "out of stock"
      caption:
        type: "string"
      theme1:
        type: "string"
      theme2:
        type: "string"
      theme3:
        type: "string"
      genres:
        type: "string"
      isbn:
        type: "string"
      additional_info:
        type: "string"
      description:
        type: "string"
      reviews:
        type: "string"
    title: "Book"
    description: "A book for sale in the store"
    example:
      id: 2
      title: "The old man and the sea"
      author: 2
      price: 12.81
      currency: "€"
      stockQty: 301
      soldqty: 103
      status: "available"
      caption: "Old Man caption"
      theme1: "death"
      theme2: "nature"
      theme3: "friendship"
      genres: "travel"
      isbn: "34g4jr928r"
      additional_info: "info on The Old Man and the Sea"
      description: "description of The Old Man and the Sea"
      reviews: "User1: good; User2: well written"
  Response:
    type: "object"
    required:
    - "success"
    properties:
      success:
        type: "boolean"
      error:
        type: "string"
        